import { useRouter } from "next/router";
import { useMemo } from "react";

/**
 * A custom hook that mimics the useSearchParams hook for Next.js by leveraging useRouter.
 * It returns the current query parameters as a URLSearchParams object and a function to set them.
 * Generated by ChatGPT, I had to give the dude some credits for all the hardwork.
 * @deprecated Use `useSearchParamsV2` instead.
 */
export function useSearchParams() {
	const router = useRouter();

	// Convert the current query params object to URLSearchParams for easy manipulation.
	const searchParams = useMemo(() => {
		return new URLSearchParams(router.query);
	}, [router.query]);

	/**
	 * Function to update the URL search parameters.
	 * @param {URLSearchParams} newSearchParams The new search parameters to be applied.
	 * @param {boolean} replace Whether to replace the current history state or push a new one.
	 */
	function setSearchParams(newSearchParams, { replace = false } = {}) {
		const url = {
			pathname: window.location.pathname,
			query: Object.fromEntries(newSearchParams.entries()),
		};

		if (replace) {
			router.replace(url, undefined, { shallow: true });
		} else {
			router.push(url, undefined, { shallow: true });
		}
	}

	/**
	 * Function to update the URL search parameters with an array value.
	 * @param {string} paramName The name of the parameter to update.
	 * @param {string[]} value The new value to set.
	 * @param {object} options Additional options for updating the search parameters.
	 */
	function setSearchParamsArray(paramName, value, options) {
		searchParams.delete(paramName);
		searchParams.set(paramName, value.join(","));
		setSearchParams(searchParams, options);
	}

	return [searchParams, setSearchParams, setSearchParamsArray];
}

// TODO: Remove this file once all consumers have been updated to use `useSearchParamsV2` as the default hook.
export * from "./search-params-v2.hook";
